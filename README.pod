=encoding utf8

=head1 NAME

dstar-gantry - convenience wrapper for container-based dstar corpus operations

=cut

##======================================================================
=pod

=head1 SYNOPSIS

 dstar-gantry.sh [GANTRY_OPTS] [GANTRY_ACTION(s)] [-- [DOCKER_OPTS] [-- [BUILD_ARGS]]]

 dstar-gantry.sh Options (GANTRY_OPTS):
   -h  , -help           # this help message
   -V  , -version        # show program version and exit
   -n  , -dry-run        # just print what we would do
   -fg , -bg             # run container in foreground (default) or background
   -rm , -persist        # remove container on termination (default) or don't
   -c CORPUS             # dstar corpus label (required for most operations)
   -d DSTAR_ROOT         # host path for sparse persistent dstar superstructure (default=$HOME/dstar)
   -C CORPUS_ROOT        # host path for dstar corpus checkout (default=DSTAR_ROOT/corpora/CORPUS)
   -S CORPUS_SRC         # host path of dstar corpus sources (default=DSTAR_ROOT/sources/CORPUS/ if present)
   -R RESOURCES_DIR      # host path for persistent CAB resources (default=DSTAR_ROOT/resources/ if present)
   -RO                   # mount RESOURCES_DIR read-only (suppress resource synchronization by container)
   -f RCFILE             # read gantry variables from RCFILE (bash source; default=$HOME/.dstar-gantry.rc)
   -i IMAGE              # use docker image IMAGE (default=lex.dwds.de:443/dstar/dstar-buildhost:latest)
   -e VAR=VALUE          # environment variables are passed to docker-run(1) -e
   -E ENV_FILE           # environment files are passed to docker-run(1) --env-file
   -v /PATH:/MOUNT       # volume options are are passed to docker-run(1) -v
   -x CABX_RUN           # cabx servers for container 'run' action (default=dstar-http-9096)
   -p HTTP_PORT          # map container port 80 to host HTTP_PORT for 'run' action
   -u USER               # build user or UID (default=ddc-admin)
   -g GROUP              # build group or GID (default=ddc-admin)

 dstar-gantry.sh Actions (GANTRY_ACTION(s)):
   init                  # (re-)initialize persistent sparse local DSTAR_ROOT checkout
   sync-host             # syncronize local DSTAR_ROOT checkout via `svn update`
   sync-self             # syncronize local DSTAR_ROOT checkout via `svn update`
   sync                  # alias for 'sync-host' and 'sync-self'
   pull                  # retrieve selected IMAGE from docker registry (may require `docker login`)
   gc                    # clean up stale local dstar-buildhost docker images
   ...                   # other actions are passed to container docker/build script (see below)

 Docker Options (DOCKER_OPTS): see docker-run(1).

 Container docker/build Arguments (BUILD_ARGS; see also `dstar-gantry.sh help`):
   help                  # show help for container docker/build script
   self-test             # run rudimentary self-test(s)
   checkout              # checkout corpus build superstructure to CORPUS_ROOT/build/
   build                 # index a corpus in CORPUS_ROOT/build from sources in CORPUS_SRC/
   update                # update an existing index in CORPUS_ROOT/build/ from CORPUS_SRC/
   update-meta           # update index metadata in in CORPUS_ROOT/build/ from CORPUS_SRC/
   test                  # test a corpus build in CORPUS_ROOT/build/
   archive-build         # archive CORPUS_ROOT/build/ to ${dstar_archive_dir}
   archive-publish       # archive publishable corpus data to ${dstar_archive_dir}
   install               # install CORPUS_ROOT/build/ to CORPUS_ROOT/{server,web}/
   uninstall             # recursively delete CORPUS_ROOT/{server,web}/
   publish               # deploy CORPUS_ROOT/build/ to production host(s)
   run                   # run CORPUS_ROOT/{server,web}/ corpus instance in container
   shell                 # run a bash shell in the container
   exec CMD...           # execute an arbitrary CMD... in container

 Useful container mounts under /dstar:
  config/                # global dstar configuration (read-only)
  resources/             # CAB analysis resources (read-only)
  sources/CORPUS/        # corpus TEI-XML sources (read-only)
  corpora/CORPUS/        # corpus instance checkout (read-write, required)
  corpora/CORPUS/config.local
                         # local corpus configuration overrides

 Host Environment Variables:
   SSH_AUTH_SOCK         # (required) ssh-agent(1) socket

 Container Environment Variables:
  SSH_AUTH_SOCK               # ssh-agent socket (should probably be a bind-mount)
  dstar_init_hooks            # default INIT_HOOK_DIRS (=)

  dstar_build_uid             # user-id in host system (=`id -u`)
  dstar_build_gid             # group-id in host system (=`id -g`)
  dstar_build_umask           # umask for build process (=002)

  dstar_corpora               # corpora to operate on (whitespace-separated list)
  dstar_corpus                # alias for dstar_corpora (=)
  dstar_archive_dir           # target directory for archive-* targets (=)

  dstar_sync_resources        # sync resources (auto|no|force; default=auto)
  dstar_sync_rcfiles          # resources to be synchronized (default:empty -> all)
  dstar_checkout_corpus_opts  # options for dstar-checkout-corpus.sh (=-force -local-config)
  dstar_build_sh_opts         # options for CORPUS/build/build.sh (=-echo-preset=make-info)
  dstar_cabx_run              # cabx expanders to run (=dstar-http-9096)
  dstar_relay_conf            # socat relay configuration (=/etc/default/dstar-relay)

  ...                         # all environment variables are passed down to child processes (e.g. make)

=cut

##======================================================================
=pod

=head1 DESCRIPTION

The C<dstar-gantry> project provides a thin top-level wrapper script
(C<dstar-gantry.sh>) for
D* corpus operations using the latest C<dstar-buildhost> docker image
pulled from the ZDL docker registry at C<https://lex.dwds.de:443>.
The C<dstar-buildhost> docker container invoked
by C<dstar-gantry.sh> can simulate any of the
L<C<BUILDHOST>|$doc/README.html#BUILDHOST>,
L<C<RUNHOST>|$doc/README.html#RUNHOST>,
and/or L<C<WEBHOST>|$doc/README.html#WEBHOST> D* L<host roles|$doc/README.html#Hosts-and-Roles>,
but is mostly intended to act as a (virtual) L<C<BUILDHOST>|$doc/README.html#BUILDHOST>.

The remainder of this document describes the C<dstar-gantry.sh> wrapper script
in more detail; it does B<not> constitute exhaustive documentation
for the dstar corpus management framework or its features and functionality,
not even of that subset of the dstar functionality which can be invoked through
C<dstar-gantry.sh>. Please consult the relevant
L<dstar documentation|$doc/> if you have questions which aren't
addressed by this document.

See L</INSTALLATION> for instructions on installing C<dstar-gantry> on
your local machine, see L</USAGE> for details on the various options
and arguments, and see L</EXAMPLES> for some example C<dstar-gantry.sh>
invocations.


=cut

##======================================================================
=pod

=head1 INSTALLATION

This section describes the installation procedure for debian-based linux machines.
C<dstar-gantry> was developed and tested on an x86_64 machine running Debian GNU/Linux 10 ("buster").
Other systems and architectures may work too, but are not explicitly supported.

If you are running C<dstar-gantry.sh> on a "semi-production" host
(e.g. lal.dwds.de), you can skip to L</initialize persistent data>.

=cut

##--------------------------------------------------------------
=pod

=head2 Requirements

=over 4

=item debian packages

 bash
 openssh-client
 subversion

=item docker

You will need L<docker|https://docs.docker.com/get-docker/> installed on your local machine
with an appropriate L<docker storage driver|/docker storage drivers>,
and the requisite L<permissions|https://docs.docker.com/engine/install/linux-postinstall/>
for your local user account (e.g. membership in the C<docker> group).  C<dstar-gantry> was developed and tested using
the C<docker-ce> and C<docker-ce-client> packages version 19.03.8.

=item registry credentials

If you wish to make use of gantry's C<pull> action to acquire the
latest C<dstar-buildhost> docker image (recommended), you will
need credentials (username and password) for the ZDL docker registry,
and will need to manually log into the registry
using L<C<docker login>|https://docs.docker.com/engine/reference/commandline/login/>:

 $ docker login https://lex.dwds.de:443
 Username: ZDL_DOCKER_REGISTRY_USERNAME
 Password: ZDL_DOCKER_REGISTRY_PASSWORD
 Login Succeeded

Contact the C<dstar-gantry> maintainer or the ZDL docker registry maintainer
(currently Gregor Middell) if you do not have credentials for the
ZDL docker registry.

=item ssh-agent

You will need an accessible L<ssh-agent|https://en.wikipedia.org/wiki/Ssh-agent>
for your local user account as indicated by the C<SSH_AUTH_SOCK> environment variable,
with at least one registered identity (public+private key-pair).

In order to avoid password prompts during sparse subversion checkouts on the local host
(recommended), your ssh identity should be authorized for password-free access to
C<odo.dwds.de>, as whatever user your L<C<~/.ssh/config>|https://linux.die.net/man/5/ssh_config>
specifies (by default the same username as on your local machine).

In order to avoid password prompts during implicit subversion operations in the
C<dstar-buildhost> container invoked by gantry (recommended), your ssh identity should be
authorized for password-free access to C<ddc@odo.dwds.de>.

If you wish to make use of gantry's
automatic resource synchronization features (default, recommended),
your identity should be authorized for password-free access
to C<${CABRC_RSYNC_USER}@${CABRC_SYNCHOST}> (typically C<ddc@data.dwds.de>).

In order to publish corpus indices via gantry to remote RUNHOSTs and/or WEBHOSTs,
your identity will need to be authorized for password-free access to
C<${PUBLISH_DEST}> and/or C<${WEB_PUBLISH_DEST}> (typically C<ddc-admin@{data,kaskade}.dwds.de>).

See L<C<dstar/doc/README_ssh.txt>|$doc/README_ssh.html> for more details.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Installation Procedure

=over 4

=item download gantry

Checkout the gantry project itself from SVN to your local machine,
for example to $HOME/dstar-gantry:

 $ svn checkout svn+ssh://svn.dwds.de/home/svn/dev/ddc-dstar/docker/gantry/trunk ~/dstar-gantry

Example output (trimmed):

 A    ~/dstar-gantry/bin
 A    ~/dstar-gantry/bin/dstar-gantry.sh
 ...
 Checked out revision 32806.

=item setup PATH

Put the C<dstar-gantry.sh> script in your C<PATH> (optional, recommended):

 $ export PATH=$PATH:$HOME/dstar-gantry/bin

... or just symlink it into some directory already in your C<PATH>:

 $ sudo ln -s $HOME/dstar-gantry/bin/*.sh /usr/local/bin

=item initialize persistent data

Initialize persistent sparse local dstar checkout (usually in C<$HOME/dstar>)
with the L<C<init>|/init> action:

 $ dstar-gantry.sh init

Example output (trimmed):

 dstar-gantry.sh: INFO: init: (re-)initializing sparse persistent DSTAR_ROOT=/home/USER/dstar
 dstar-gantry.sh: CMD: svn co --depth=files svn+ssh://svn.dwds.de/home/svn/dev/ddc-dstar/trunk /home/USER/dstar
 A    /home/USER/dstar/.DSTAR_ROOT
 ...
 dstar-gantry.sh: INFO: no container actions BUILD_ARG(s) specified: nothing to do.

B<NOTE>: if you are running C<dstar-gantry.sh> on a "semi-production" host
(e.g. lal.dwds.de), you should probably be using the central
dstar checkout in C</home/ddc-dstar/dstar/> rather than
a "private" gantry checkout in C<$HOME/dstar/> ... in this case, the gantry maintainer
has probably already installed an appropriate machine-wide L<C</etc/dstar-gantry.rc>|/-f RCFILE>,
and you may want to create a convenience symlink in you home directory to remind you:

 $ ln -sfT /home/ddc-dstar/dstar ~/dstar


=item retrieve docker image

Download the latest C<dstar-buildhost> image from the ZDL docker registry
with the L<C<pull>|/pull> action:

 $ dstar-gantry.sh pull

Example output (trimmed):

 dstar-gantry.sh: CMD: docker pull lex.dwds.de:443/dstar/dstar-buildhost:latest
 latest: Pulling from dstar/dstar-buildhost
 
 Digest: sha256:e5b47f225619e6b433df0dbcdcdfdfdb93e703893ceb6ed9f78f338e77358a77
 Status: Downloaded newer image for lex.dwds.de:443/dstar/dstar-buildhost:latest
 lex.dwds.de:443/dstar/dstar-buildhost:latest
 dstar-gantry.sh: INFO: no container actions BUILD_ARG(s) specified: nothing to do.

=item run self-test

Run rudimentary self-tests with the gantry L<C<self-test>|/self-test> action:

 $ dstar-gantry.sh self-test

Example output (trimmed):

 dstar-gantry.sh: INFO: using DSTAR_ROOT=/home/USER/dstar
 dstar-gantry.sh: WARNING: neither CORPUS nor CORPUS_ROOT specified (use the -c or -C options)
 dstar-gantry.sh: WARNING: no CORPUS_SRC directory specified (expect trouble if you're trying to (re-)index a corpus)
 dstar-gantry.sh: INFO: setting RESOURCE_DIR=/local/home/ddc-dstar/dstar/resources
 dstar-gantry.sh: WARNING: CORPUS_ROOT= does not exist (continuing anyway, YMMV)
 dstar-gantry.sh: CMD: docker run --rm -ti --name=dstar-gantry- ... self-test
 ...
 build INFO: running self-test(s)
 build INFO: TEST: checking for ssh-agent socket (dstar-nice.sh test -w '/tmp/ssh-agent-wrap.sock')
 build INFO: TEST: checking for ssh-agent identity (test -n "`dstar-nice.sh ssh-add -l | fgrep -v \"no identities\"`")
 build INFO: TEST: svn+ssh access (dstar-nice.sh svn st -u .DSTAR_ROOT)
 Status against revision:  32806
 build INFO: TEST: sync resources (dstar-nice.sh make -C resources sync-test)
 make: Entering directory '/home/ddc-dstar/dstar/resources'
 make: Leaving directory '/home/ddc-dstar/dstar/resources'
 build INFO: TEST: publish to default runhost (ssh "ddc-admin@data.dwds.de" /bin/true)
 build INFO: TEST: publish to default webhost (ssh "ddc-admin@kaskade.dwds.de" /bin/true)
 build INFO: self-test: all tests passed (6/6)

=back

=cut

##======================================================================
=pod

=head1 USAGE

 dstar-gantry.sh [GANTRY_OPTS] [GANTRY_ACTION(s)] [-- [DOCKER_OPTS] [-- [BUILD_ARGS]]]

The C<dstar-gantry.sh> wrapper script is a command-line tool in the UNIX tradition,
and as such accepts a number of options and arguments:

=over 4

=item L<GANTRY_OPTS|/Gantry Options>

C<GANTRY_OPTS> options are interpreted by the C<dstar-gantry.sh> script itself,
including some convenience wrappers for some common
L</Docker Options>.

=item L<GANTRY_ACTION(s)|/Gantry Actions>

C<GANTRY_ACTION(s)> indicate which operation(s) are to be performed,
typically corresponding directly to the L</Container Actions> of the same name.

=item L<DOCKER_OPTS|/Docker Options>

C<DOCKER_OPTS> are passed to
the L<C<docker-run>|https://docs.docker.com/engine/reference/run/>
subprocess for the embedded C<dstar-buildhost> container.

=item L<BUILD_ARGS|/Container Actions>

C<BUILD_ARGS> are passed to the
C</dstar/docker/build> script invocation in the embedded C<dstar-buildhost> container.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Gantry Options

=over 4

=item -h, -help

Display a brief help message.

=item -V, -version

Display the version information for C<dstar-gantry> itself.

=item -n, -dry-run

If specified, just prints what would have been done, but doesn't perform any destructive actions.

=item -fg, -bg

Specifies whether to run the embedded
C<dstar-buildhost> container interactively in the foreground (C<-fg>, default)
or detached in the background (C<-bg>).
Foreground (C<-fg>) operation is equivalent to the
C<docker-run> C<--tty=true> and  C<--interactive=true>
options
and background (C<-bg>) operation is equivalent to the
C<docker-run> C<--detached=true> option.
See L<docker-run(1)|https://docs.docker.com/engine/reference/run/#options> for details.

If you choose to run the container
in the background (e.g. for L</build> operations on large corpora), you
can still view the default console ouptut with the
L<C<docker logs>|https://docs.docker.com/engine/reference/commandline/logs/> command,
or inspect the build logs in
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/log/> directly.


=item -rm, -persist

Specifies whether (C<-rm>) or not (C<-persist>) to remove the embedded C<dstar-buildhost> container
when the requested L<build operation(s)|/BUILD_ARGS> have completed.
This behavior is implemented in terms of the
C<docker-run> C<--rm> option;
see L<docker-run(1)|https://docs.docker.com/engine/reference/run/#options> for details.
If you request container persistence with the C<-persist> option
(or the lower-level L<docker option|/DOCKER_OPTS> C<--rm=false>), you will have to remove
it yourself with the L<C<docker rm>|https://docs.docker.com/engine/reference/commandline/rm/> command.

=item -c CORPUS

Specifies the dstar corpus label ("collection label") for the operand corpus.
Required for most operations.

=item -d DSTAR_ROOT

Specifies the host path (or symlink) used for (sparse) persistent dstar superstructure (default=C<$HOME/dstar>).
By default, persistent CAB resources and index data will be created here.
This directory should be
a sparse checkout of the L<dstar project|https://kaskade.dwds.de/dstar/doc/README.html#Project-Directory-Structure>
containing at least partial checkouts of the
L<C<doc/>|https://kaskade.dwds.de/dstar/doc/README.html#doc>,
L<C<corpora/>|https://kaskade.dwds.de/dstar/doc/README.html#corpora>,
L<C<sources/>|https://kaskade.dwds.de/dstar/doc/README.html#sources>,
and L<C<resources/>|https://kaskade.dwds.de/dstar/doc/README.html#resources>
subdirectories.

On "semi-production" dstar hosts (e.g. C<lal.dwds.de>), you should typically use a
global C<DSTAR_ROOT> checkout in C</home/ddc-dstar/dstar>.


=item -C CORPUS_ROOT

Specifies the host path (or symlink) used for dstar corpus checkout (default=C<L<DSTAR_ROOT|/-d DSTAR_ROOT>/corpora/L<CORPUS|/-c CORPUS>>).
Implies volume mount L<C<-v CORPUS_ROOT:/dstar/corpora/CORPUS>|/-v /PATH:/MOUNT>.


=item -S CORPUS_SRC

Specifies the host path (or symlink) where dstar corpus sources reside (default=C<L<DSTAR_ROOT|/-d DSTAR_ROOT>/sources/L<CORPUS|/-c CORPUS>/>
if present,
otherwise C<`readlink -m L<CORPUS_ROOT|/-C CORPUS_ROOT>/src`> if present,
otherwise required).
Implies volume mount L<C<-v CORPUS_SRC:/dstar/sources/CORPUS:ro>|/-v /PATH:/MOUNT>.

=item -R RESOURCES_DIR

Specifies the host path (or symlink) for persistent CAB resources (default=C<L<DSTAR_ROOT|/-d DSTAR_ROOT>/resources/> if present).
Implies volume mount L<C<-v RESOURCES_DIR:/dstar/resources>|/-v /PATH:/MOUNT>.

=item -RO

If the C<-RO> option is specified and C<L<RESOURCES_DIR|/-R RESOURCES_DIR>> is present on the local machine,
then C<L<RESOURCES_DIR|/-R RESOURCES_DIR>> will be mounted read-only in the container, which suppresses resource
synchronization in the running container.  If you want each container invocation to ensure that its
CAB resources are fully up-to-date, you should B<NOT> use this option.
It can be useful to bypass synchronization overhead, minimize network bandwidth, and ensure resource consistency
for post-hoc updates of existing corpora though.  Use with consideration.

=item -f RCFILE

Reads gantry configuration variables from C<RCFILE> on the host machine.
C<RCFILE> is evaluated as bash source.  May be specified more than once,
in which case files are read in the order specified and later declarations
may clobber earlier ones.  By default, C<dstar-gantry.sh> reads the following
global configuration files (if they exist) before evaluating any C<RCFILE> specified on
the command-line:

 /etc/dstar-gantry.rc
 $HOME/.dstar-gantry.rc

See the example
L<C<dstar-gantry.rc> file|http://odo.dwds.de/websvn/filedetails.php?repname=D%2A%3A+Dev-Repository&path=%2Fddc-dstar%2Fdocker%2Fgantry%2Ftrunk%2Fdstar-gantry.rc> in the C<dstar-gantry> distribution for a list of available variables.

=item -i IMAGE

Specifies the docker image to be L<pulled|/pull> and/or invoked via
L<C<docker run>|https://docs.docker.com/engine/reference/run/>.
Default is C<lex.dwds.de:443/dstar/dstar-buildhost:latest>.

=item -e VAR=VALUE

Specify an environment variable override for the container
via L<C<docker run -e VAR=VALUE>|https://docs.docker.com/engine/reference/run/#env-environment-variables>.

=item -E ENV_FILE

Specify a file containing environment variable overrides for the container,
via L<C<docker run --env-file ENV_FILE>|https://docs.docker.com/engine/reference/run/#env-environment-variables>.

=item -v /PATH:/MOUNT

Mounts the host directory C</PATH> as a volume into the container at C</MOUNT>,
passed to L<C<docker_run -v>|https://docs.docker.com/engine/reference/run/#volume-shared-filesystems>.

Potentially useful volume mounts C</MOUNT> include:

  /dstar/config/            # global dstar configuration (read-only)
  /dstar/resources/         # CAB analysis resources (read-only)

=item -x CABX_RUN

Select container-internal CAB server(s) to start for container L<run|/run> action;
default=C<dstar-http-9096>.

=item -p HTTP_PORT

Map containers port 80 to host port C<HTTP_PORT> for L<C<run>|/run> action
via L<C<docker run -p HTTP_PORT:80>|https://docs.docker.com/engine/reference/run/#expose-incoming-ports>.

=item -u USER

Specifies username or UID of host build user (default=C<ddc-admin> if present,
otherwise current user).
If the UID does not exist in the container (it probably doesn't), it will be created.

=item -g GROUP

Specifies group name or GID of host build user (default=C<ddc-admin> if present,
otherwise current group).
If the GID does not exist in the container (it probably doesn't), it will be created.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Gantry Actions

=head3 init

(Re-)initializes persistent sparse local L<C<DSTAR_ROOT>|/-d DSTAR_ROOT> checkout
on the local host (usually C<$HOME/dstar>).
You should only have to call this once per host,
before performing any other C<dstar-gantry.sh> actions.

=head3 sync-host

Synchronizes the persistent sparse local L<C<DSTAR_ROOT>|/-d DSTAR_ROOT> checkout
on the local host (usually C<$HOME/dstar>) via C<svn update>.  You should typically
call this before each C<dstar-gantry.sh> session, in order to ensure that your
C<L<DSTAR_ROOT|/-d DSTAR_ROOT>> checkout is up-to-date.

=head3 sync-self

Attempts to synchronize the local C<dstar-gantry> checkout via C<svn update>.
If the C<dstar-gantry.sh> script (or symlink) does not resolve to an SVN working copy
on your system, this won't work, and you will need to perform any updates manually.
You should typically
call this before each C<dstar-gantry.sh> operation, in order to ensure that your
C<dstar-gantry.sh> itself is up-to-date.

=head3 sync

Convenience alias for the L</sync-host> and L</sync-self> actions.

=head3 pull

Retrieves the selected L<C<dstar-buildhost> IMAGE|/-i IMAGE> from
the ZDL docker registry.  May require a preceding L<C<docker login>|/registry credentials>.

=head3 gc

Cleans up stale C<dstar-buildhost> docker images on the local host.

=head3 L<BUILD_ACTION...|/Container Actions>

Other non-option arguments (not beginning with a dash "-")
are passed verbatim as L</Container Actions> to the
C</dstar/docker/build> script in the embedded C<dstar-buildhost> container.

=cut

##--------------------------------------------------------------
=pod

=head2 Docker Options

Docker options following the first C<--> on the C<dstar-gantry.sh> command-line are passed
verbatim to the L<C<docker run>|https://docs.docker.com/engine/reference/run/> subprocess
for the selected L<C<dstar-buildhost> IMAGE|/-i IMAGE>.  If you need to tweak the
C<docker run> call with more than the
L<C<-e VAR=VALUE>|/-e VAR=VALUE>,
L<C<-E ENV_FILE>|/-E ENV_FILE>,
or L<C<-v /PATH:/MOUNT>|/-v /PATH:/MOUNT>
options, this is how to do it.

=cut

##--------------------------------------------------------------
=pod

=head2 Container Actions

All arguments following the second C<--> on the C<dstar-gantry.sh> command-line are passed
verbatim to the C</dstar/docker/build> script call in the embedded
L<C<dstar-buildhost>|/-i IMAGE> container.  See the output of
C<dstar-gantry.sh help> for a synopsis of the C</dstar/docker/build> calling
conventions.

=over 4

=item help

Shows a brief help message from the container C</dstar/docker/build> script.

=item self-test

Runs some rudimentary self-test(s) and reports results.
Not all self-tests need to pass in order for C<dstar-gantry.sh> to be useful;
the functionality you need depends on what you're trying to do
and your personal preferences.

=item checkout

Creates or updates corpus build superstructure in
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/> from SVN.
This is basically a wrapper for
L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#Corpus-Checkout>,
i.e.
a L<corpus checkout|$doc/HOWTO.html#Corpus-Checkout>.
You should probably never have to invoke this action manually,
since it is implicitly called by the higher-level corpus
operations such as L</build>, L</update>, L</publish>, etc.

=item build

(Re-)indexes a corpus in
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>
from TEI-XML sources in
L<C<CORPUS_SRC/>|/-S CORPUS_SRC>.
This is basically a wrapper for
L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#Corpus-Checkout>
and
L<C<CORPUS_ROOT/build/build.sh -build>|$doc/HOWTO.html#build.sh-and-cron-autobuild.sh>,
i.e.
a L<full corpus re-build|$doc/talks/corpus-ops-2019/#howto-build>.

=item update

Updates an existing corpus index in
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>
from TEI-XML sources in
L<C<CORPUS_SRC/>|/-S CORPUS_SRC>.
This is basically a wrapper for
L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#Corpus-Checkout>
and
L<C<CORPUS_ROOT/build/build.sh -update>|$doc/HOWTO.html#build.sh-and-cron-autobuild.sh>,
i.e.
an L<incremental corpus update|$doc/README_build.html#Incremental-Update>
as described L<here|$doc/talks/corpus-ops-2019/#howto-update>.

=item update-meta

Updates metadata for an existing corpus index in
L<C<CORPUS_ROOT/build>|/-C CORPUS_ROOT>
from TEI-XML sources in
L<C<CORPUS_SRC/>|/-S CORPUS_SRC>.
This is basically a wrapper for
L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#Corpus-Checkout>
and
L<C<CORPUS_ROOT/build/build.sh -update-meta>|$doc/HOWTO.html#build.sh-and-cron-autobuild.sh>,
i.e.
a L<corpus metadata update|$doc/README_build.html#Metadata-Update>.

=item test

Runs automated consistency tests for an existing corpus build in
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/test/>.
This is basically a wrapper for
L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#Corpus-Checkout>
and
L<C<CORPUS_ROOT/build/build.sh -test>|$doc/HOWTO.html#build.sh-and-cron-autobuild.sh>,
i.e.
L<corpus consistency tests|$doc/HOWTO.html#Consistency-Testing>.

=item archive-build

Archives an existing corpus build-directory
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>
to the directory L<C<${dstar_archive_dir}>|/dstar_archive_dir> if set,
otherwise to the (corpus-specific) directory specified by the 
C<ARC_BUILD_DIR> dstar make variable; 
usually C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/archive/>.
The build-archive will be created as a gzipped tar archive
C<L<CORPUS|/-c CORPUS>.build-I<DATETIME>.tar.gz>
where I<DATETIME> is a timestamp in I<YYYY-MM-DD.HHMMSS> format,
and will include all intermediate build files in C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>.

=item archive-publish

Archives publishable corpus data 
from the corpus build directory C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>
to the directory L<C<${dstar_archive_dir}>|/dstar_archive_dir> if set,
otherwise to the (corpus-specific) directory specified by the 
C<ARC_PUBLISH_DIR> dstar make variable; 
usually C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/archive/>.
The publish-archive will be created as a gzipped tar archive
C<L<CORPUS|/-c CORPUS>.publish-I<DATETIME>.tar.gz>
where I<DATETIME> is a timestamp in I<YYYY-MM-DD.HHMMSS> format,
and should contain all the index data required
for a production runtime corpus instance on L<C<RUNHOST> and/or C<WEBHOST>|$doc/README.html#Hosts-and-Roles>).
Future versions of this software may support additional operations on such archives.

Note that archives created with the C<archive-publish> action only
include that subset of the data from local corpus build directory C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>
which would be deployed by a L</publish> operation,
and B<not>
the actual published index data from remote runtime "production"
host(s) as specified by the C<PUBLISH_DEST> and/or C<WEB_PUBLISH_DEST>
dstar make variables.
Archives created with the C<archive-publish> action will also
B<not> include any intermediate build files,
so it should be much smaller
in size than those created by the L</archive-build> action.
Unlike an L</archive-build> archive however, an
C<archive-publish> archive cannot be used as the basis for subsequent
subsequent L<incremental corpus updates|$doc/README_build.html#Incremental-Update>
or infrastructure maintainence; please L<act responsibly|/build responsibly>.


=item install

Installs an existing corpus index from
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>
to
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/{server,web}/>
within the running C<dstar-buildhost> container,
usually in preparation for
L<local staging|/MYCORPUS staging>.
See also L</uninstall>.

=item uninstall

Recursively removes corpus runtime data
directories
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/{server,web}/>,
recommended after
L<local staging|/MYCORPUS staging>.
This action will remove
B<everything> under
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/{server,web}/>,
so if you've stored anything there yourself,
you should save it before executing this action.

=item publish

Deploy an existing corpus index from
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>
to production host(s) as selected by the
dstar make variables
C<PUBLISH_DEST> and/or C<WEB_PUBLISH_DEST>.

=item run

Runs a L<C<CORPUS>|/-c CORPUS> instance
from
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/{server,web}/>
in the temporary container.
For this action, you will probably also want to specify
L<C<-p HTTP_PORT>|/-p HTTP_PORT>.
If specified, this must be the last container action executed.

You can inspect the console log for the embedded container with the
L<C<docker logs>|https://docs.docker.com/engine/reference/commandline/logs/> command.

=item shell

Runs a C<bash> shell as the
L<build user|/-u USER>
in the embedded container; useful
for inspection and debugging.

=item exec CMD

Just executes C<CMD...> in the embedded container.
If specified, this must be the final container action executed.
Use with B<extreme caution>.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Container Environment Variables

The following environment variables influence operations in the
embedded C<dstar-buildhost> container, and can be customized
by means of the gantry L</-e VAR=VALUE> and/or L</-E ENV_FILE> options.

=over 4

=item SSH_AUTH_SOCK

The communication socket for L<ssh-agent|/ssh-agent> on the docker host
will be bind-mounted into the container as
C</tmp/ssh-auth-gantry.sock>.
The embedded C</dstar/docker/build> script will typically
take care of wrapping that socket
as C</tmp/ssh-agent-wrap.sock>, to ensure appropriate permissions
for the build L<USER|/-u USER> and L<GROUP|/-g GROUP> within
the container itself.

=item dstar_init_hooks

Default initialization hook directory for the embedded C</dstar/docker/build>
script; typically empty.  If you need to perform additional actions
on the container startup, you can set this variable to the container path of
a (mounted) directory containing hooks appropriate for the
L<C<run-parts>|https://manpages.debian.org/buster/debianutils/run-parts.8.en.html>
system utility.  If no C<INIT_HOOK_DIR(s)> are specified on the command-line or
by this environment variable, hooks are run from any directory matching

 /home/ddc-dstar/dstar/docker/build.d/
 /opt/dstar-build*/

=item dstar_build_uid

Numeric UID of build user; should be automatically populated by gantry
from the L</-u USER> option.
If no user with this UID exists in the container (likely), a temporary
user C<dstar-build> will be created during container startup.

=item dstar_build_gid

Numeric GID of build group; should be automatically populated by gantry
from the L</-g GROUP> option.
If no group with this GID exists in the container (likely), a temporary
group C<dstar-build> will be created during container startup
and the C<L<dstar_build_uid|/dstar_build_uid>> user approrpriately modified.

=item dstar_build_umask

Specifies the permissions umask for the build process.
The default is typically specified in the C<dstar-buildhost> docker image
itself as C<002>, which creates new files with the group-writable flag set.
If you're feeling paranoid, you can set this to C<022> or even C<077>,
but that may cause L<problems down the line|/E000013 ... Permission denied>.

=item dstar_corpora

Specifies the corpus or corpora to operate on
as a whitespace-separated list.
Typcically set by C<dstar-gantry.sh> itself
to L<C<CORPUS>|/-c CORPUS>.
You probably don't want to set this yourself.

=item dstar_corpus

Alias for L</dstar_corpora>.

=item dstar_archive_dir

Target directory for
L</archive-build> and L</archive-publish>
actions.  Empty (unset) by default.


=item dstar_sync_resources

Whether or not to synchronize CAB resources
to L<C<RESOURCES_DIR>|/-R RESOURCES_DIR> on container startup.
Accepts values C<auto> (default), C<no>, and C<force>.
The default value (C<auto>) will only attempt to synchronize
resources if L<C<RESOURCES_DIR>|/-R RESOURCES_DIR> is
not mounted L<read-only|/-RO>.

=item dstar_sync_rcfiles

Specifies which CAB resources in
L<C<RESOURCES_DIR>|/-R RESOURCES_DIR>
are to by synchronized on container startup.
If set and non-empty, overrides that value
of the dstar make variable C<CABRC_FILES>
for the implicit C<make -C /dstar/resources sync>
syncronization call.  Empty by default, which
uses the default value for C<CABRC_FILES>,
and should cause all default CAB resources
to be synchronized.

=item dstar_checkout_corpus_opts

Specifies options for
L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#Corpus-Checkout>
as implicitly called prior to any corpus operation.
Default: C<-force -local-config>.

=item dstar_build_sh_opts

Specifies options for
L<C<CORPUS_ROOT/build/build.sh -build>|$doc/HOWTO.html#build.sh-and-cron-autobuild.sh>.
Default: C<-echo-preset=make-info>.

=item dstar_cabx_run

Specifies which CAB server(s) to start in the container for the L</run> action
as a whitespace-separated list.
CAB server(s) are identified by the file basename up to the first dot (".")
of the corresponding configuration file C</dstar/cabx/*.rc>.
Default: C<dstar-http-9096>.
Known values:

 dstar-http-9096       - runtime expansion for synchronic German
 dstar-http-dta-8088   - runtime expansion for historical German
 dstar-http-dta-9099   - "public" web-service for historical German
 dstar-http-en-9097    - runtime expansion for synchronic English
 dstar-http-taghx-9098 - runtime lemma-equivalence using TAGH


=item dstar_relay_conf

Specifies container path containing L<C<socat>|https://linux.die.net/man/1/socat> relay
configuration for C</dstar/init/dstar-relay.sh>.  Empty by default, which starts no relays.
This option is useful for workstations with insufficient resources to run
embedded L<CAB expansion servers|/dstar_cabx_run> locally, or in situations
where L<C<RESOURCES_DIR>|/-R RESOURCES_DIR> is not fully populated in order
to bind "virtual" local ports which forward all requests to a remote
server daemon (e.g. C<data.dwds.de:9096> for the CAB expansion server
C<dstar-http-9096>).  It can also be useful for testing "metacorpora"
in a container without having to run all daughter corpora in the container as well;
in this case, relays should be defined for each immediate daughter node
of the metacorpus to be run.

See
L<C<dstar-buildhost:/dstar/init/etc_default_dstar_relay>|http://odo.dwds.de/websvn/filedetails.php?repname=D%2A%3A+Dev-Repository&path=%2Fddc-dstar%2Ftrunk%2Finit%2Fetc_default_dstar_relay> for syntax and more details.



=item VAR

All environment variables are passed down to child processes (e.g. L<C<dstar-nice.sh>|$doc/HOWTO.html#dstar-nice-sh>, C<make>);
see L<"Customizable Variables" in C<README_build.txt>|$doc/README_build.html#Customizable-Variables>
for more (non-exhaustive) details.

=back

=cut

##======================================================================
=pod

=head1 EXAMPLES

This section provides rudimentary sketches of some typical dstar corpus
operations using C<dstar-gantry.sh>.  Since C<dstar-gantry> is basically
just a convenience wrapper around the C<ddc-dstar> corpus infrastructure,
most of the existing L<dstar documentation|$doc/> applies to C<dstar-gantry>
as well, where the L<C<DSTAR_BUILDHOST>|$doc/README.html#BUILDHOST> role is fulfilled by the embedded
embedded L<C<dstar-buildhost> IMAGE|/-i IMAGE> container, and the
corpus directories
L<C<CORPUS_ROOT>|/-C CORPUS_ROOT>
and
L<C<CORPUS_SRC>|/-S CORPUS_SRC> are bind-mounted into the container
from the gantry host itself.


The examples in this section assume you have a working
C<dstar-gantry> installation in your C<$PATH> and a
sparse local L<C<DSTAR_ROOT>|/-d DSTAR_ROOT> directory
or symlink at C<$HOME/dstar>.
See L</INSTALLATION> if that is not the case.

Corpus-specific examples assume
you are working on a corpus called "C<MYCORPUS>"; replace
"C<MYCORPUS>" with the name of your real corpus where appropriate.

=cut

##--------------------------------------------------------------
=pod

=head2 Common Prerequisites

In addition to a working L<gantry installation|/INSTALLATION>,
you should typically do the following
performing any corpus operation:

=over 4

=item Pull and Synchronize

 $ dstar-gantry.sh pull sync

Ensure your host's L<C<DSTAR_ROOT>|/-d DSTAR_ROOT>, gantry installation,
and L<C<dstar-buildhost> image|/-i IMAGE>
are up-to-date with the L<C<sync>|/sync> and L<C<pull>|/pull> actions.

=item Setup Corpus Sources

 $ ln -s /path/to/real/MYCORPUS/tei-xml/sources ~/dstar/sources/MYCORPUS

You presumably have some TEI-XML corpus sources on which you wish to operate;
these should follow the guidelines in L<C<dstarE<sol>docE<sol>README_sources>|$doc/README_sources.html>.
If you want to avoid having to specify the gantry L</-S CORPUS_SRC> option for every C<dstar-gantry.sh>
call, you should symlink the location of the "real" sources into your
L<C<DSTAR_ROOT>|/-d DSTAR_ROOT> checkout at
C<L<DSTAR_ROOT|/-d DSTAR_ROOT>/sources/MYCORPUS>.
See also L<"Corpus Sources" in the dstar-HOWTO|$doc/HOWTO.html#Corpus-Sources>
and L<README_sources.txt|$doc/README_sources.html>.

=item Setup Corpus Configuration

You will need provide a configuration (C<MYCORPUS.mak> and C<MYCORPUS.opt>) for your corpus as described
under L<"Corpus Configuration" in the dstar-HOWTO|$doc/HOWTO.html#Corpus-Configuration>
and under L<"HOWTO: Corpus Configuration" in the dstar corpus operations slides|$doc/talks/corpus-ops-2019/#howto-config>.
Since the default L<C<DSTAR_CONFIG>|$doc/README_build.html#DSTAR_CONFIG> for dstar-gantry
builds resides by default in the embedded C<dstar-buildhost> container, you
may want to provide the corpus configuration by creating a
L<C<CORPUS_ROOT/config.local/>|$doc/README_build.html#Corpus-specific-customizations-with-config.local>
directory; otherwise you will have to commit the corpus configuration files to SVN
under L<C<DSTAR_ROOT/config/>|$doc/README.html#config> before proceeding.  It should be safe
to use L<gantry's sparse DSTAR_ROOT|/-d DSTAR_ROOT> for this purpose, but note that you will
first have to check it out (gantry doesn't require or checkout C<L<DSTAR_ROOT|/-d DSTAR_ROOT>/config/> by default):

 $ svn update --set-depth=infinity ~/dstar/config
 $ emacs \
    ~/dstar/config/corpus/MYCORPUS.mak \
    ~/dstar/config/opt/MYCORPUS.opt \
    ~/dstar/doc/Changes.txt
 $ svn add ~/dstar/config/*/MYCORPUS.*
 $ svn commit -m "+ added and/or updated corpus configuration for MYCORPUS" \
    ~/dstar/config/*/MYCORPUS.* \
    ~/dstar/doc/Changes.txt

If you choose to use a global configuration in your sparse C<L<DSTAR_ROOT|/-d DSTAR_ROOT>/config/>,
you will probably want to L<mount it as a volume|/-v /PATH:/MOUNT> in the embedded container
by specifying "C<-v $DSTAR_ROOT/config:/dstar/config:ro>" on the gantry command-line.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Example: Corpus Build

Before attempting to (re-)build a corpus, you should ensure that
you have fulfilled all the L</Common Prerequisites>.

=over 4

=item MYCORPUS build

 $ dstar-gantry.sh -bg -c MYCORPUS build

Building a corpus index from TEI-XML sources or re-building an existing corpus
index with the gantry L<C<build>|/build> action
follows the basic pattern described
under L<"Annotate and Build" in the dstar-HOWTO|$doc/HOWTO.html#Annotate-and-Build>
using L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#dstar-checkout-corpus.sh>
to populate or update the L<C<CORPUS_ROOT>|/-C CORPUS_ROOT> checkout
and calling L<C</dstar/corpora/MYCORPUS/build.sh -build>|$doc/HOWTO.html#build.sh> in the
in the embedded L<C<dstar-buildhost>|/-i IMAGE> container.
By default, full L<build-logs|$doc/HOWTO.html#Build-Logging> will be written to
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/log/build.I<DATETIME>.log>, and some progress information
will be printed to the console via 
L<C<cronit.perl -echo-preset=make-info>|$doc/HOWTO.html#cronit.perl>.
See L<README_build|$doc/README_build.html> for more details on the build process.

=item MYCORPUS consistency testing

 $ dstar-gantry.sh -RO -c MYCORPUS test

Once a corpus index has been succesfully L<built|/build>, you can run
some basic consistency checks with the gantry L<test|/test> action;
see 
L<"Consistency Testing" in the dstar-HOWTO|$doc/HOWTO.html#Consistency-Tests>
for more information.
By default, full L<test-logs|$doc/HOWTO.html#Build-Logging> will be written to
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/log/test.I<DATETIME>.log>, and some progress information
will be printed to the console.


=item MYCORPUS staging

 $ dstar-gantry.sh -bg -p 8001 -RO -c MYCORPUS install run
 $ sensible-browser http://localhost:8001/dstar/MYCORPUS
 ... do some manual testing ...
 $ docker kill dstar-gantry-MYCORPUS
 $ dstar-gantry.sh -RO -c MYCORPUS uninstall

Once a corpus index has been succesfully L<built|/build>, you can use
C<dstar-gantry.sh> to L<install|/install> and L<run|/run>
a  staging" instance of the dstar
L<C<RUNHOST> and C<WEBHOST> roles|$doc/README.html#Hosts-and-Roles> for that corpus
in the embedded C<dstar-buildhost> container, analogous to
(but independent of) the L<"Sandbox Testing"|$doc/HOWTO.html#Sandbox-Testing>
functionality for "bare-metal" dstar corpus builds.
You only need to L</install> if you have updated corpus index data in the
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/> directory, e.g.
via the L</build>, L</update>, or L</update-meta> operations); you
can re-stage an existing L<installation|/install> with the
gantry L</run> action.

Use the gantry L<-p HTTP_PORT|/-p HTTP_PORT> option to specify a host
port number to map to the embedded HTTP server, and use the
gantry L<C<-bg>|/-fg, -bg> or L<C<docker run -d>|https://docs.docker.com/engine/reference/run/#detached--d> option
to run the embedded container in the background.  When you are done with manual
testing, remember to terminate the running container with L<C<docker kill>|https://docs.docker.com/engine/reference/commandline/kill/>
It is also good practice to L</uninstall> the runtime data when
you are done with the staging instance.

If you are running dstar-gantry on a L<C<GANTRYHOST>|$doc/README.html#GANTRYHOST> behind
a firewall and you wish to call your browser on a different machine (let's call it
C<WORKSTATION>), you may need to setup an L<ssh tunnel|https://www.ssh.com/ssh/tunneling/example>
to the remote port, and shut it down again when you're finished with the staging instance.
This can be accomplished by e.g.:

 GANTRYHOST  $ dstar-gantry.sh -RO -bg -p 8001 -c MYCORPUS install run
 WORKSTATION $ ssh ssh-tunnel.sh 8002:lal.dwds.de:8001 -N GANTRYHOST & gantry_tunnel_pid=$!
 WORKSTATION $ sensible-browser http://localhost:8002/dstar/MYCORPUS

 ... do some manual testing & inspection in your browser ...

 WORKSTATION $ kill $gantry_tunnel_pid
 GANTRYHOST  $ docker kill dstar-gantry-MYCORPUS
 GANTRYHOST  $ dstar-gantry.sh -RO -c MYCORPUS uninstall

... replace C<8001> in the above example with an L<C<HTTP_PORT>|/-p HTTP_PORT> of your choice
to be bound by the container on C<GANTRYHOST>, and replace C<8002> with a port number of your
choice to be bound by the ssh-tunnel on C<WORKSTATION>.

=item MYCORPUS deployment

 $ dstar-gantry.sh -RO -c MYCORPUS publish

If the corpus build is satisfactory, the next step is usually to install the newly indexed corpus
onto the production L<C<RUNHOST> and C<WEBHOST>|$doc/README.html#Hosts-and-Roles>.
The C<dstar-gantry> "L</publish>" action follows the pattern described under
L<"Install or Publish" in the dstar-HOWTO|$doc/HOWTO.html#Install-or-Publish>,
using
L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#dstar-checkout-corpus.sh>
to populate and/or update the
L<runtime checkous|$doc/HOWTO.html#Runtime-Checkouts>
by calling
L<C<CORPUS_ROOT/build/build.sh -publish>|$doc/HOWTO.html#build.sh-and-cron-autobuild.sh>
in the embedded L<C<dstar-buildhost>|/-i IMAGE> container.
By default, full L<publish-logs|$doc/HOWTO.html#Build-Logging> will be written to
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/log/publish.I<DATETIME>.log>, and some progress information
will be printed to the console.

=item MYCORPUS post-deployment

If the deployment is successful, continue with the procedures described under
L<"It's Alive"|$doc/HOWTO.html#Its-Alive>,
L<"Nail it Down"|$doc/HOWTO.html#Nail-it-Down>,
and (optionally)
L<"Housekeeping"|$doc/HOWTO.html#Housekeeping>
in the L<dstar-HOWTO|$doc/HOWTO.html>.  In particular, if you have deployed a "production"
corpus which was configured by means of a
L<C<CORPUS_ROOT/config.local/>|$doc/README_build.html#Corpus-specific-customizations-with-config.local>
directory, you should ensure that the
L<Corpus configuration file(s)|$doc/HOWTO.html#Corpus-Configuration> from
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/config.local/> are checked into
the central L<C<ddc-dstar/trunk/config>|$doc/README.html#config> repository,
and document your changes in
L<C<DSTAR_ROOT/doc/Changes.txt>|$doc/Changes.html>.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Example: Corpus Update

Before attempting to update a corpus, you should ensure that
you have fulfilled all the L</Common Prerequisites>, and that you
have an up-to-date instance of the L<C<CORPUS_ROOT>|/-C CORPUS_ROOT>
checkout -- including any intermediate build data -- on the gantry host,
typically under C<L<DSTAR_ROOT|/-d DSTAR_ROOT>/corpora/MYCORPUS>.

=over 4

=item MYCORPUS update

 $ dstar-gantry.sh -bg -c MYCORPUS update

Updating an existing corpus index after some source file(s) have been changed, added,
and/or deleted by means of the gantry L<update|/update> action follows the basic
pattern described under
L<"Incremental Update" in C<README_build.txt>|$doc/README_build.html#Incremental-Update>.
The gantry L<update|/update> action uses
uses L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#dstar-checkout-corpus.sh>
to update the existing L<C<CORPUS_ROOT>|/-C CORPUS_ROOT> superstructure,
and calls L<C<CORPUS_ROOT/build/build.sh -update>|$doc/HOWTO.html#build.sh> in the
in the embedded L<C<dstar-buildhost>|/-i IMAGE> container to perform the
index update.
By default, full L<build-logs|$doc/HOWTO.html#Build-Logging> will be written to
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/log/update.I<DATETIME>.log>, and some progress information
will be printed to the console via 
L<C<cronit.perl -echo-preset=make-info>|$doc/HOWTO.html#cronit.perl>.
See L<"Incremental Update" in C<README_build.txt>|$doc/README_build.html#Incremental-Update>
for more details.

=item MYCORPUS post-update

After updating a corpus with the
L<update|/update>
action, proceed as you
would after a L<build|/build> action, i.e.
with L<consistency testing|/MYCORPUS consistency testing>,
L<staging|/MYCORPUS staging>,
L<deployment|/MYCORPUS deployment>,
and L<post-deployment|/MYCORPUS post-deployment>.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Example: Corpus Metadata Update

Before attempting to update corpus metadata, you should ensure that
you have fulfilled all the L</Common Prerequisites>, and that you
have an up-to-date instance of the L<C<CORPUS_ROOT>|/-C CORPUS_ROOT>
checkout -- including any intermediate build data -- on the gantry host,
typically under C<DSTAR_ROOT/corpora/MYCORPUS>.

=over 4

=item MYCORPUS metadata-update

 $ dstar-gantry.sh -RO -bg -c MYCORPUS update-meta

Updating metadata for an existing corpus index after some source file(s) have been changed, added,
and/or deleted by means of the gantry L<update-meta|/update-meta> action follows the basic
pattern described under
L<"Metadata Update" in C<README_build.txt>|$doc/README_build.html#Metadata-Update>.
The gantry L<update-update|/update-meta> action uses
uses L<C<dstar-checkout-corpus.sh>|$doc/HOWTO.html#dstar-checkout-corpus.sh>
to update the existing L<C<CORPUS_ROOT>|/-C CORPUS_ROOT> superstructure,
and calls L<C</dstar/corpora/MYCORPUS/build.sh -update-meta>|$doc/HOWTO.html#build.sh> in the
in the embedded L<C<dstar-buildhost>|/-i IMAGE> container to perform the
index metadata update.
By default, full L<build-logs|$doc/HOWTO.html#Build-Logging> will be written to
C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/log/update-meta.I<DATETIME>.log>, and some progress information
will be printed to the console via 
L<C<cronit.perl -echo-preset=make-info>|$doc/HOWTO.html#cronit.perl>.
See L<"Metadata Update" in C<README_build.txt>|$doc/README_build.html#Metadata-Update>
for more details.

=item MYCORPUS post-metadata-update

After updating a corpus with the
L<update-meta|/update-meta>
action, proceed as you would after a L<build|/build> action, i.e.
with L<consistency testing|/MYCORPUS consistency testing>,
L<staging|/MYCORPUS staging>,
L<deployment|/MYCORPUS deployment>,
and L<post-deployment|/MYCORPUS post-deployment>.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Example: Corpus Build Archive

=over 4

=item MYCORPUS build archive

 $ dstar-gantry.sh -RO -c pnn_test archive-build
 $ rm -rf ~/dstar/corpora/pnn_test/{build,server,web}

If your L<C<CORPUS_ROOT/build/>|/-C CORPUS_ROOT> directory is taking up too much space
after L<deployment|/publish>
and doesn't participate in any
L<superordinate metacorpora|$doc/HOWTO.html#Superordinate-Metacorpora>,
L<incremental updates|$doc/README_build.html#Incremental-Update>,
or other operations requiring access to intermediate build files,
then you may want to archive it and remove the original L<C<CORPUS_ROOT>|/-C CORPUS_ROOT>
on the gantry host to save disk space (... but take care not to remove the archive while doing so).
You can use the gantry L<C<arhive-build>|/archive-build> action
for this purpose, which creates a gzipped tar archive
C<${dstar_archive_dir}/MYCORPUS.build-I<DATETIME>.tar.gz>,
where I<DATETIME> is a timestamp in I<YYYY-MM-DD.HHMMSS> format and
C<${dstar_archive_dir}> is a L<container environment variable|/-e VAR=VALUE>,
by default C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/archive/>.

=item MYCORPUS build archive restoration

If you want to restore an archived corpus build directory, just unpack
the archive file back into the L<C<CORPUS_ROOT>|/-C CORPUS_ROOT> directory:

 $ cd ~/dstar/corpora/MYCORPUS/archive
 $ tar xzf MYCORPUS.build-DATETIME.tar.gz -C ..

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Example: Corpus Deployment Archive

=over 4

=item MYCORPUS deployment archive

 $ dstar-gantry.sh -RO -c pnn_test archive-publish
 $ rm -rf ~/dstar/corpora/pnn_test/{server,web}

You can create a "snapshot" of publishable corpus data from
a L<C<CORPUS_ROOT/build/>|/-C CORPUS_ROOT> directory
by means of the gantry L</archive-publish> action.  The resulting
archive will be created as
C<${dstar_archive_dir}/MYCORPUS.publish-I<DATETIME>.tar.gz>,
where I<DATETIME> is a timestamp in I<YYYY-MM-DD.HHMMSS> format and
C<${dstar_archive_dir}> is a L<container environment variable|/-e VAR=VALUE>,
by default C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/archive/>,
and should contain all the index data required
for a production runtime corpus instance on L<C<RUNHOST> and/or C<WEBHOST>|$doc/README.html#Hosts-and-Roles>.

=item MYCORPUS deployment archive restoration

If you want to restore an archived corpus deployment snapshot, just unpack
the archive file back into the L<C<CORPUS_ROOT/build/>|/-C CORPUS_ROOT> directory:

 $ cd ~/dstar/corpora/MYCORPUS/archive
 $ tar xzf MYCORPUS.publish-DATETIME.tar.gz -C ../build

To re-deploy the restored archive data to runtime "production" hosts, you
should follow this up with a L</publish> operation.

=back

=cut

##--------------------------------------------------------------
=pod

=head2 Example: Corpus Removal

C<dstar-gantry> does not currently provide any shortcuts for removing
an existing corpus, but it is straightforward to do by hand.

=over 4

=item MYCORPUS gantry host removal

 $ rm -rf ~/dstar/corpora/MYCORPUS/{build,server,web}

To remove all corpus L<build|/build> and L<staging|/MYCORPUS staging> data,
simply delete the relevant subdirectories from the gantry host.
This will remove all dstar data created by the gantry actions
L</build>, L</update>, L</install>, etc., including intermediate build files.
If you have created any
L<build-|/archive-build>
and/or
L<publish-|/archive-publish>archives
under C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/archive/> which you want to save,
you may want to move them to a different location (e.g. C<$HOME/attic/>):

 $ mv ~/dstar/corpora/MYCORPUS/archive/*.tar.gz ~/attic/

Otherwise, or if you wish to delete any old archives under
under C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/archive/>, you can delete
the entire C<L<CORPUS_ROOT|/-C CORPUS_ROOT>> directory:

 $ rm -rf ~/dstar/corpora/MYCORPUS/

=item MYCORPUS decommissioning

To decommission ("un-deploy") a corpus instance
which has already been deployed to
a runtime "production" L<C<RUNHOST>|$doc/README.html#RUNHOST>
and/or L<C<WEBHOST>|$doc/README.html#WEBHOST>,
follow the general procedure described under
L<"Corpus Removal" in the dstar-HOWTO|$doc/HOWTO.html#Corpus-Removal>,
where the gantry host acts as the C<BUILDHOST>,
so L<gantry host removal|/MYCORPUS gantry host removal>
replaces the
L<"Freeze or remove build data"|$doc/HOWTO.html#Freeze-or-remove-build-data-optional>
step in the general HOWTO.


=back

=cut


##======================================================================
=pod

=head1 CAVEATS

=head2 docker storage drivers

Problems with runtime cross-layer copy operations have been observed in the past
when using the C<overlay2> docker storage driver,
which is the default in recent version of the C<docker-ce> package.
On systems where these problems occurred, the C<aufs> docker storage driver 
did not exhibit these issues; see L<https://docs.docker.com/storage/storagedriver/aufs-driver/> for details.

Even more recent debian releases no longer contain the C<aufs> storage driver.
The C<overlay2> storage driver appears to work correctly under
Debian 10 ("buster") using C<docker-ce-5:19.03.12~3-0~debian-buster>
("Docker Community Edition", version 19.03.12) and linux kernel version
4.19.0-6-amd64.

It is currently recommended to try the default storage driver for your docker installation
(probably C<overlay2>), and only switch to C<aufs> if you experience issues with cross-layer
copy operations.

Typically, the C<aufs> driver can be enabled by editing the file F</etc/docker/daemon.json> to contain:


 {
  "storage-driver":"aufs"
 }

... and re-starting any docker services on the host machine.

=head2 build responsibly

If you build a corpus with C<dstar-gantry> in a non-standard location and/or on a non-production
host, you implicitly assume all resonsibility for keeping track of the intermediate build
files in C<L<CORPUS_ROOT|/-C CORPUS_ROOT>/build/>.  Deploying only a corpus runtime instance
to "production" hosts by means of the L</publish> action is B<not> sufficient to enable
subsequent L<incremental corpus updates|$doc/README_build.html#Incremental-Update>,
integration of new dstar functionality, or to enable many bug-fixes.  You are free to delete or archive corpus build
directories once you're done with them, but this is likely to make more work for everyone (yourself included)
down the road.  Consider L<archiving the corpus build directory|/MYCORPUS build archive>
if you need to save disk space.

=head2 log changes

When making changes to a corpus configuration in SVN, remember to
log any changes to L<C<DSTAR_ROOT/doc/Changes.txt>|$doc/HOWTO.html#doc%2FChanges.txt>.
If you are using a
L<C<CORPUS_ROOT/config.local/>|$doc/README_build.html#Corpus-specific-customizations-with-config.local>
directory for corpus configuration
outside of version control, remember to L</build responsibly>, and seriously consider
checking the final configuration into version control.


=cut

##======================================================================
=pod

=head1 KNOWN BUGS AND COMMON ERRORS

=over 4

=item Error response from daemon: ... no basic auth credentials

 dstar-gantry.sh: CMD: docker pull lex.dwds.de:443/dstar/dstar-buildhost:latest
 Error response from daemon: Get https://lex.dwds.de:443/v2/dstar/dstar-buildhost/manifests/latest: no basic auth credentials
 dstar-gantry.sh: ERROR: command `docker pull lex.dwds.de:443/dstar/dstar-buildhost:latest` exited abnormally with status 1

This error can occur when executing a L<C<gantry pull>|/pull> if you neglected to
run C<docker login> for the ZDL docker registry.
See L</registry credentials>.

=item WARNING: neither CORPUS nor CORPUS_ROOT specified

 dstar-gantry.sh: WARNING: neither CORPUS nor CORPUS_ROOT specified (use the -c or -C options)

This warning message usually indicates that you forgot to specify either a corpus label
with the L</-c CORPUS> option or a corpus root directory with the L</-C CORPUS_ROOT> option.
In this case, any corpus-dependent operation such as L</build>, L</test>, etc. is likely to fail
... unless you have set appropriate
L<container variables|/Container Environment Variables> such as
L</dstar_corpora> with the L</-e VAR=VALUE> option and
volume mounts with the L</-v /PATH:/MOUNT> option.
If the requested L<gantry action|/Gantry Actions> is not a corpus-dependent operation
(e.g. L</shell>), you can ignore this warning.

=item WARNING: no CORPUS_SRC directory specified

 dstar-gantry.sh: WARNING: no CORPUS_SRC directory specified (expect trouble if you're trying to (re-)index a corpus)

This warning message indicates that C<dstar-gantry.sh> could not locate a
L<corpus source directory|/-S CORPUS_SRC> in any of the default locations, and
that you haven't specified one with the L</-S CORPUS_SRC> option.
Source-dependent operations such as L</build>, L</update>, and L</update-meta> are likely to fail
unless you specify additional
L<container variables|/Container Environment Variables> and/or
L<volume mounts|/-v /PATH:/MOUNT>.

If the requested L<gantry action|/Gantry Actions> is a source-independent operation
such as L</install>, L</publish>, or L</run>, you can ignore this warning.

=item Conflict. The container name "/dstar-gantry-MYCORPUS" is already in use

 docker:
  Error response from daemon:
  Conflict.
  The container name "/dstar-gantry-MYCORPUS" is already in use by container "51cea72ba7cf14a5a44ee373b6f81f1b07da5b947e4f852cea8566b11017752d".
  You have to remove (or rename) that container to be able to reuse that name.
 See 'docker run --help'.

This error is emitted by L<C<docker run>|https://docs.docker.com/engine/reference/run/> if you attempt
to invoke a C<dstar-gantry> operation for a C<L<CORPUS|/-c CORPUS>> for which there is already
a docker container running (or if you attempt to invoke multiple simultaneous C<dstar-gantry> operations
without specifying any C<L<CORPUS|/-c CORPUS>>).  By default, C<dstar-gantry.sh> implicitly prepends the
L<C<--name=dstar-gantry-MYCORPUS>|https://docs.docker.com/engine/reference/run/#name---name>
option
to L<C<DOCKER_OPTS>|/Docker Options>
when invoking the embedded container.
Since
L<C<docker run>|https://docs.docker.com/engine/reference/run> will refuse to run 2 different
containers of the same name (as the error message clearly states), at most one gantry container
can be running per corpus and C<GANTRYHOST> by default.

To see which C<docker> containers are currently running, you can
use the L<C<docker ps>|https://docs.docker.com/engine/reference/commandline/ps/> command
(also check L<C<docker ps -a>|https://docs.docker.com/engine/reference/commandline/ps/> to include
stopped or terminated containers).

If you I<really> want to run a second docker container for a given
L<C<CORPUS>|/-c CORPUS>, you will need to override the default container name
in L<C<DOCKER_OPTS>|/Docker Options>, e.g.:

 $ dstar-gantry.sh -c MYCORPUS -p 8001 run -- -name=MYCORPUS-8001

If you use an alternative container name for a
L<staging|/MYCORPUS staging> instance with the gantry L</run> action, you will
need to adjust the
L<C<docker kill>|https://docs.docker.com/engine/reference/commandline/kill/>
command accordingly:

 $ docker kill MYCORPUS-8001


=item E000013 ... Permission denied

 CMD /home/ddc-dstar/dstar/bin/dstar-nice.sh svn co --depth=files svn+ssh://svn.dwds.de/home/svn/dev/ddc-dstar/trunk/corpus MYCORPUS
 svn: E000013: Can't create directory '/home/ddc-dstar/dstar/corpora/MYCORPUS/.svn': Permission denied

"Permission denied" errors from SVN during corpus checkout in the embedded
C<dstar-buildhost> container
can occur whenever you attempt to operate on a
L<C<CORPUS_ROOT>|/-C CORPUS_ROOT> working copy for which the
gantry build L<C<USER>|/-u USER> and/or L<C<GROUP>|/-g GROUP> does not
have sufficient permissions.  Typically, this is because the
L<C<CORPUS_ROOT>|/-C CORPUS_ROOT> checkout is owned by a different user.
If you consistently use the default C<ddc-admin> user for corpus operations
as L<recommended in the dstar-HOWTO|$doc/HOWTO.html#Play-nicely>,
you should never encounter this error.

How you solve this problem is entirely up to you.
Some possibilities include:

=over 4

=item *

Ask the current owner or an administrator (C<root>) to alter the permissions
recursively using standard UNIX tools (C<chown -R>, C<chmod -R>), or do so
yourself with C<sudo>.

=item *

If you have read permission, you can copy the directory to a new location
with appropriate permissions and specify the path to your new copy
using the L</-C CORPUS_ROOT> option.  This may use a lot of additional
disk space, so it's best to avoid this if possible.

=item *

You can create a new C<CORPUS_ROOT> directory with appropriate permissions
and specify its location with the L</-C CORPUS_ROOT> option.  This is
even more wasteful than copying the original directory.

=begin comment

=item *

Alter the permissions recursively as C<root> in the embedded container
using the L</exec> action.
This can wreak all sorts of havoc if you're not careful,
so B<PROCEED WITH UTMOST CAUTION>.


=item *

Specify the current owner and/or group of the L<C<CORPUS_ROOT>|/-C CORPUS_ROOT>
directory using the L</-u USER> and/or L</-g GROUP> options, effectively
spoofing a build by the current owner and/or group.
This is essentially lying, so don't do it.

=end comment

=back

... see also 
L<"Ownership and Permissions" in the dstar-HOWTO|$doc/HOWTO.html#Ownership-and-Permissions>.


=item AH00526: ... Unknown Authn provider: external

 INFO spawned: 'apache' with pid 1417
 apache stderr | AH00526: Syntax error on line 32 of /etc/apache2/sites-enabled/020-dstar-MYCORPUS.conf: Unknown Authn provider: external
 INFO exited: apache (exit status 1; not expected)
 apache stdout | Action '-D FOREGROUND -e notice' failed.
 The Apache error log may have more information.
 INFO gave up: apache entered FATAL state, too many start retries too quickly

This error message is emitted by the
L<apache|https://httpd.apache.org/> HTTP server
to the
L<C<docker logs>|https://docs.docker.com/engine/reference/commandline/logs/> console
of a container L</run> action
if the L<corpus configuration|$doc/HOWTO.html#Corpus-Configuration>
set the L<C<WEB_SITE_AUTH_EXTERNAL>|$doc/README_build.html#WEB_SITE_AUTH_EXTERNAL>
variable to a non-trivial value (e.g. C<auth_dwdsdb>).
The L<C<dstar-buildhost>|/-i IMAGE> does not currently support
the apache external authorization module,
so you should specify an override
L<C<WEB_SITE_AUTH_EXTERNAL=no>|$doc/README_build.html#WEB_SITE_AUTH_EXTERNAL>
with the L</-e VAR=VALUE> option.  It's probably a good idea to force
L<C<WEB_SITE_PUBLIC=yes>|$doc/README_build.html#WEB_SITE_PUBLIC>
in staging containers too:

 $ dstar-gantry.sh -c MYCORPUS -eWEB_SITE_AUTH_EXTERNAL=no -eWEB_SITE_PUBLIC=yes run

Future versions of gantry may implicitly set these values for staging instances.

=item other errors

See L<"COMMON ERRORS" in the dstar-HOWTO|$doc/HOWTO.html#COMMON-ERRORS>.

=back

=cut

##======================================================================
=pod

=head1 SEE ALSO

=over 4

=item *

The L<dstar README|$doc/README.html> and the references mentioned therein
describe the D* framework in more detail.  Most of the D* documentation
available under L<C<$doc>|$doc/> predates the existence of C<dstar-gantry>
and of the C<dstar-buildhost> image itself, and in the context of
C<dstar-gantry> should be interpreted relative to the running C<dstar-buildhost>
container.

=item *

L<C<dstar/doc/README_sources.txt>|$doc/README_sources.html>
contains details on corpus source TEI-XML conventions.

=item *

L<C<dstar/doc/README_ssh.txt>$doc/README_ssh.html>
may provide some help setting up a new ssh identity.  Note that C<dstar-gantry> requires
an accessible C<ssh-agent>, so if you want to run C<dstar-gantry>
on your local workstation or some other non-production host, you may
need to L<run ssh-agent manually|$doc/README_ssh.html#Manual-ssh-agent-daemon>.

=item *

L<C<dstar/doc/Changes.txt>|$doc/Changes.html>
contains a manual log of D*-related changes.

=item *

See the L<C<docker-run>|https://docs.docker.com/engine/reference/run/> manpage
for details on docker options.

=back

=cut

##======================================================================
=pod

=head1 AUTHOR

Bryan Jurish E<lt>jurish@bbaw.deE<gt> created the ddc-dstar corpus administration system
and the C<dstar-gantry> wrappers.

=cut
